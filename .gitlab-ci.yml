stages:
  - build
  - push
  - deploy

variables:
  AWS_ECR_REGION: "us-east-1"
  USER_SERVICE_IMAGE: "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_ECR_REGION.amazonaws.com/user-service"
  ORDER_SERVICE_IMAGE: "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_ECR_REGION.amazonaws.com/order-service"

before_script:
  - echo $AWS_ACCESS_KEY_ID | docker login --username AWS --password-stdin https://$AWS_ACCOUNT_ID.dkr.ecr.$AWS_ECR_REGION.amazonaws.com

build_user_service:
  stage: build
  script:
    - docker build -t $USER_SERVICE_IMAGE ./user-service

build_order_service:
  stage: build
  script:
    - docker build -t $ORDER_SERVICE_IMAGE ./order-service

push_user_service:
  stage: push
  script:
    - docker push $USER_SERVICE_IMAGE

push_order_service:
  stage: push
  script:
    - docker push $ORDER_SERVICE_IMAGE

deploy:
  stage: deploy
  script:
    - ssh -o StrictHostKeyChecking=no ec2-user@$EC2_PUBLIC_IP 'kubectl apply -f ~/deployment-files/'

variables:
  AWS_REGION: "us-east-1"
  ECR_REGISTRY: "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
  IMAGE_REPO_NAME: "devops-flask-app"
  IMAGE_TAG: "latest"

before_script:
  - apk add --no-cache curl python3 py3-pip docker
  - pip install awscli
  - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

build_and_push:
  stage: build
  script:
    - docker build -t $IMAGE_REPO_NAME ./app
    - docker tag $IMAGE_REPO_NAME $ECR_REGISTRY/$IMAGE_REPO_NAME:$IMAGE_TAG
    - docker push $ECR_REGISTRY/$IMAGE_REPO_NAME:$IMAGE_TAG
